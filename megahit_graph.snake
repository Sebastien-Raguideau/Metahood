from Bio.SeqIO.FastaIO import SimpleFastaParser as SFP

def get_kmer_length(wildcards):
    _=open(checkpoints.contig_folder.get(group=wildcards.group).output[0]) # just a line to ask reevaluation after contigs.fa have been created 
    kmer_length=next(SFP(open(wildcards.group+"/contigs/contigs.fa")))[0].split("_")[0][1:]
    return kmer_length

rule create_fastg:
	input : "{group}/contigs/contigs.fa"
	output: temp("{group}/graph/contigs.fastg")
	log : "{group}/graph/fastg.log"
	params: lambda w:get_kmer_length(w)
	shell : "megahit_toolkit contig2fastg {params} {input} > {output} 2>{log}"
		
rule create_gfa:
	input: "{file}.fastg"
	output: temp("{file}_bad_name.gfa")
	log : "{file}.log"
	shell : "Bandage reduce {input} {output} 2>{log}"

rule rename_gfa:
	input: gfa="{group}/graph/contigs_bad_name.gfa",
		   fa="{group}/contigs/contigs.fa"
	output: "{group}/graph/contigs.gfa"
	shell : "{SCRIPTS}/Rename_gfa.py {input.gfa} {input.fa} {output}"

rule subgraph:
	input: gfa="{group}/graph/{name}.gfa",
		   annotation="{group}/annotation/contigs_{DB}.tsv"
	output:"{group}/graph/{name}.{DB}.gfa"
	shell:"{SCRIPTS}/Create_subgraph.py {input.annotation} {input.gfa} -o{output}"

rule gff_to_bed:
	input: "{filepath}.gff"
	output: "{filepath}.bed"
	shell: "{SCRIPTS}/Gff_to_bed.py {input} {output}"

rule orf_graph:
	input: gfa="{group}/graph/{name}.gfa",
		   bed="{group}/annotation/contigs.bed"
	output:"{group}/graph/{name}_ORF.gfa"
	shell:"{SCRIPTS}/Build_ORF_graph.py {input.bed} {input.gfa} {output}"

