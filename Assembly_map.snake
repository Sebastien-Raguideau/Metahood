
# ---- Assembly ----------------------------------------------------------------

# Assemble with MegaHIT


rule megahit:
    input:   left=lambda w:LEFT_READS[w["group"]],
             right=lambda w:RIGHT_READS[w["group"]],
             sample_processing= IN+"/quality_done"
    output:  "{group}/contigs/contigs.fa"
    params:  left=lambda w: ",".join(LEFT_READS[w["group"]]),
             right=lambda w: ",".join(RIGHT_READS[w["group"]]),
             dir="{group}/assembly",
             mem=MAX_MEM_PERCENT,
             Additional_params=ASSEMBLER_PARAMS,
             assembly = "../assembly/final.contigs.fa"
    resources:
        memG=int(MAX_MEMG)
    threads: 70
    log:     "{group}/assembly/assembly.log"
    message: "Assembling {wildcards.group} with MegaHIT"
    shell:   """
             megahit -1 {params.left} -2 {params.right} {params.Additional_params} -t {threads} -m {params.mem} --continue -o {params.dir} -f &> {log}
             ln -s {params.assembly} {output}
             """

# rule contig_folder:
#     input: "{group}/assembly/final.contigs.fa"
#     output: "{group}/contigs/contigs.fa"
#     shell: "mv {input} {output}"

# ---- bwa index file  -------------------------------------------

rule bwa_index:
    input:   "{path}/contigs.fa"
    output:  touch("{path}/index.done")
    log:     "{path}/index.log"
    resources : memG=100
    params : 100000000000
    message: "Building bwa index for {input}"
    shell:   "bwa index -b {params} {input} &> {log}"

# ---- map reads to the assembly contigs--------------------------------------------------
rule bwa_mem_to_bam:
    input:   index="{group}/contigs/index.done",
             contigs="{group}/contigs/contigs.fa",
             left=lambda w:SAMPLE_READS[w.sample][0], right=lambda w:SAMPLE_READS[w.sample][1]
    output:  "{group}/map/{sample}_mapped_sorted.bam"
    threads: 1000
    log:     "{group}/map/{sample}_map.log"
    message: "bwa mem mapping followed by samtool sorting for {input}"
    shell:   "bwa mem -t {threads} {input.contigs} {input.left} {input.right} 2>{log} | samtools view  -b -F 4 -@{threads} - | samtools sort -@{threads} - > {output}"
