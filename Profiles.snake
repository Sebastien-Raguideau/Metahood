from Bio.SeqIO.FastaIO import SimpleFastaParser as SFP


rule bogus_bed:
    input:   contig="{group}/contigs/contigs.fa"
    output:  bed="{group}/contigs/contigs.bed"
    run :
        handle=open(output['bed'],"w")
        for header,seq in SFP(open(input["contig"])) :
            name=header.split(" ")[0]
            handle.write("\t".join([name,"0",str(len(seq))+"\n"]))
        handle.close()

rule bed_orfs:
    input:   gff="{group}/annotation/contigs.gff"
    output:  bed="{group}/annotation/Orf.bed"
    shell : "{SCRIPTS}/Gff_to_bed.py {input.gff} {output.bed}"


rule bedtools_2:
    input:   bam="{group}/map/{sample}_mapped_sorted.bam",
             bed="{group}/contigs/contigs.bed"
    output:  "{group}/map/{sample}_contig.cov"
    log:      "{group}/map/{sample}_contig.log"
    resources:
        memG=200
    shell:   "bedtools coverage -a {input.bed} -b {input.bam} -mean > {output} 2>{log} "

rule coverage_2:
    input:   lambda w : [w.group+"/map/"+sample.split('/')[-1]+"_contig.cov" for sample in  GROUPS[w.group]]
    output:  "{group}/profile/coverage_contigs.tsv"
    priority : 1000
    shell :  """
            echo -e "contig\t""$(ls {input} | cut -f1 -d "." | rev | cut -f1 -d "/" |rev | tr "\n" "\t" | sed 's/\t$//')"> {output}
            awk 'NR==FNR{{Matrix_coverage[1,FNR]=$1}}FNR==1{{f++}}{{Matrix_coverage[f+1,FNR]=$4}}END{{for(x=1;x<=FNR;x++){{for(y=1;y<ARGC+1;y++){{if(y<ARGC){{printf("%s\t",Matrix_coverage[y,x])}}if(y==ARGC){{printf("%s",Matrix_coverage[y,x]);print""}}}}}}}}' {input} >>{output}"""
