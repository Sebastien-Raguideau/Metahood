from scripts.common import detect_reads, fill_default_values, extended_glob, get_extension
from os.path import basename

# TODO : remove the need for {ext}, pretty sure it's un-needed and it makes it particularly complicated. 

# deal with mutliple possible extensions : 
wildcard_constraints:
    ext = "(fastq.gz|fq.gz|fastq|fq)",
    IN = IN,
    prefix = ".+", # this is a trick so that the wildcard don't try to match folders/prefix, this speed up dag resolution as in this case we have too many wildcards, making it less identifyable.
    # unclear why previous negative lookahead does not work anymore
    #    suffix = "^(?!.*_trimmed).*|.{0}",
    suffix = ".*(?<!_trimmed)|.{0}",
    sample = ".+"

rule bwa_index2:
    input: "{file}"
    output: "{file}.sa"
    resources: mem_mb=10000
    conda : "%s/bwasamtools.yaml"%CONDA_ENV
    singularity : "docker://quay.io/annacprice/bwasamtools:1.10"
    shell: "bwa index {input}"


rule map_to_mask:
    input: R1 = lambda w:SAMPLE_READS[w.sample][0],
           R2 = lambda w:SAMPLE_READS[w.sample][1],
           index = "%s.sa"%FILTER
    output: bam = temp("{IN}/{sample}/Filtered.bam"),
    log: "{IN}/{sample}/mapping.log"
    threads: 10
    resources: mem_mb=100000
    conda : CONDA_ENV + "/bwasamtools.yaml"
    singularity : "docker://quay.io/annacprice/bwasamtools:1.10"
    shell: """
            bwa mem -t {threads} {FILTER} {input.R1} {input.R2} 2>{log} | samtools view  -b -f 12 -@{threads} - | samtools sort -@{threads} - > {output.bam}
            """
rule bam_to_fastq:
    input: "{IN}/{sample}/Filtered.bam"
    output: R1 = temp("{IN}/{sample}/Filtered_{prefix}R1{suffix}.{ext}"),
            R2 = temp("{IN}/{sample}/Filtered_{prefix}R2{suffix}.{ext}")
    threads: 1
    resources: mem_mb=10000
    singularity : "docker://quay.io/annacprice/bedtools:2.29.2"
    shell: """
        bamToFastq -i {input} -fq {output.R1}_temp -fq2 {output.R2}_temp
        if [[ "{wildcards.ext}" == *.gz ]]; then
            gzip -c {output.R1}_temp > {output.R1} && rm {output.R1}_temp
            gzip -c {output.R2}_temp > {output.R2} && rm {output.R2}_temp
        fi
        """


# need to use a _done file, so that I can precise {ext}, since fastqc output name can't be precised.
rule fastqc :
    input :  "{IN}/{sample}/{prefix}.{ext}"
    output : "{IN}/{sample}/{prefix}.{ext}_fastqc_done"
    conda : CONDA_ENV + "/fastqc.yaml"
    resources: mem_mb=10000
    threads: 1
    singularity : "docker://quay.io/annacprice/fastqc:0.11.9"
    shell :"""
            fastqc -o {IN}/{wildcards.sample} {input}
            touch {output}
           """

if FILTER:
    rule trim_galore :
        input : file_R1="{IN}/{sample}/Filtered_{prefix}R1{suffix}.{ext}",
                file_R1_qc="{IN}/{sample}/Filtered_{prefix}R1{suffix}.{ext}_fastqc_done",
                file_R2="{IN}/{sample}/Filtered_{prefix}R2{suffix}.{ext}",
                file_R2_qc="{IN}/{sample}/Filtered_{prefix}R2{suffix}.{ext}_fastqc_done"
        output :R1="{IN}/{sample}/Filtered_{prefix}R1{suffix}_trimmed.{ext}",
                R2="{IN}/{sample}/Filtered_{prefix}R2{suffix}_trimmed.{ext}",
                report_R1="{IN}/{sample}/Filtered_{prefix}R1{suffix}.{ext}_trimming_report.txt",
                report_R2="{IN}/{sample}/Filtered_{prefix}R2{suffix}.{ext}_trimming_report.txt"
        params : R1 = lambda w: "%s/%s/Filtered_%sR1%s_val_1.fq"%(IN,w.sample,w.prefix,w.suffix)+".gz"*(".gz" in w.ext),
                 R2 = lambda w: "%s/%s/Filtered_%sR2%s_val_2.fq"%(IN,w.sample,w.prefix,w.suffix)+".gz"*(".gz" in w.ext),
                 option = lambda w:"--gzip"*("gz" in w['ext']),
        log :   "{IN}/{sample}/{prefix}.{suffix}.{ext}.log"
        conda : CONDA_ENV + "/trim_galore.yaml"
        threads: 8
        resources: mem_mb=100000
        singularity : "docker://quay.io/annacprice/trimgalore:0.6.5"
        shell : """
        trim_galore -j {threads} --fastqc {params.option} -o $(dirname {output.R1}) --paired {input.file_R1} {input.file_R2} > {log} 2>&1
        mv {params.R1} {output.R1}
        mv {params.R2} {output.R2}
        """
else:
    rule trim_galore :
        input : file_R1="{IN}/{sample}/{prefix}R1{suffix}.{ext}",
                file_R1_qc="{IN}/{sample}/{prefix}R1{suffix}.{ext}_fastqc_done",
                file_R2="{IN}/{sample}/{prefix}R2{suffix}.{ext}",
                file_R2_qc="{IN}/{sample}/{prefix}R2{suffix}.{ext}_fastqc_done"
        output :R1="{IN}/{sample}/{prefix}R1{suffix}_trimmed.{ext}",
                R2="{IN}/{sample}/{prefix}R2{suffix}_trimmed.{ext}",
                report_R1="{IN}/{sample}/{prefix}R1{suffix}.{ext}_trimming_report.txt",
                report_R2="{IN}/{sample}/{prefix}R2{suffix}.{ext}_trimming_report.txt"
        params : R1 = lambda w: "%s/%s/%sR1%s_val_1.fq"%(IN,w.sample,w.prefix,w.suffix)+".gz"*(".gz" in w.ext),
                 R2 = lambda w: "%s/%s/%sR2%s_val_2.fq"%(IN,w.sample,w.prefix,w.suffix)+".gz"*(".gz" in w.ext),
                 option = lambda w:"--gzip"*("gz" in w['ext']),
        log :   "{IN}/{sample}/{prefix}.{suffix}.{ext}.log"
        conda : CONDA_ENV + "/trim_galore.yaml"
        threads: 8
        resources: mem_mb=100000
        singularity : "docker://quay.io/annacprice/trimgalore:0.6.5"
        shell :"""
        trim_galore -j {threads} --fastqc {params.option} -o $(dirname {output.R1}) --paired {input.file_R1} {input.file_R2} > {log} 2>&1
        mv {params.R1} {output.R1}
        mv {params.R2} {output.R2}
        """    

rule multiqc :
    input : R1=[replace_extensions(SAMPLE_READS[sample][0],FILTER) for sample in SAMPLES],
            R2=[replace_extensions(SAMPLE_READS[sample][1],FILTER) for sample in SAMPLES],
    output : IN+"/quality_done"
    conda : CONDA_ENV + "/multiqc.yaml"
    resources: mem_mb=10000
    threads: 1
    singularity : "docker://quay.io/annacprice/multiqc:1.9"
    shell : """multiqc --interactive -f {IN}/ -o {IN}/
    touch {output}
    """


