from scripts.common import detect_reads, fill_default_values, extended_glob, get_extension
from os.path import basename

# deal with mutliple possible extensions : 
wildcard_constraints:
    ext="(fastq.gz|fq.gz|fastq|fq)",
    sample2=".*"

# need to use a _done file, so that I can precise {ext}, since fastqc output name can't be precised.
rule fastqc :
    input :  IN+"{path}/{sample}.{ext}"
    output : IN+"{path}/{sample}.{ext}_fastqc_done"
    shell :"""
            fastqc -o {IN}{wildcards.path} {input}
            touch {output}
           """

rule trim_galore :
    input : file_R1="{path}/{sample}R1{sample2}.{ext}",
            file_R1_qc="{path}/{sample}R1{sample2}.{ext}_fastqc_done",
            file_R2="{path}/{sample}R2{sample2}.{ext}",
            file_R2_qc="{path}/{sample}R2{sample2}.{ext}_fastqc_done"
    output :R1="{path}/{sample}R1{sample2}_trimmed.{ext}",
            R2="{path}/{sample}R2{sample2}_trimmed.{ext}",
            report_R1="{path}/{sample}R1{sample2}.{ext}_trimming_report.txt", # broken : works only file ini is .fastq
            report_R2="{path}/{sample}R2{sample2}.{ext}_trimming_report.txt" # broken
    params : R1 = lambda w: "%s/%sR1%s_val_1.fq"%(w.path,w.sample,w.sample2)+".gz"*(".gz" in w.ext),
             R2 = lambda w: "%s/%sR2%s_val_2.fq"%(w.path,w.sample,w.sample2)+".gz"*(".gz" in w.ext),
             option = lambda w:"--gzip"*("gz" in w['ext']),
    log :   "{path}/{sample}.{sample2}.{ext}.log"
    shell :"""
    trim_galore  --fastqc {params.option} -o {wildcards.path} --paired {input.file_R1} {input.file_R2} > {log} 2>&1
    mv {params.R1} {output.R1}
    mv {params.R2} {output.R2}
    """

rule multiqc :
    input : R1=[replace_extensions(SAMPLE_READS[sample][0]) for sample in SAMPLES],
            R2=[replace_extensions(SAMPLE_READS[sample][1]) for sample in SAMPLES],
    output : IN+"/quality_done"
    shell : """multiqc --interactive -f {IN}/ -o {IN}/
    touch {output}
    """


