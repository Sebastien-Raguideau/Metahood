

rule diamond:
	input :  "{filename}.faa"
	output : "{filename}_{annotation}.m8"
	params : db=lambda w: ANNOTATION[w.annotation]["db"],
			 blast=lambda w: ANNOTATION[w.annotation]["blast"]
	log:     "{filename}_{annotation}_diamond.log"
	threads:  1000
	shell :   "diamond {params.blast} -d {params.db}  -q {input} -p {threads} -o {output} -f6 qseqid sseqid qstart qend qlen sstart send slen length pident evalue bitscore &>{log}"

rule annotation:
	input :  "{filename}_{annotation}.m8"
	output : "{filename}_{annotation}.tsv"
	params : annotation=lambda w: ANNOTATION[w.annotation]["annotation"],
			 Bitscore=lambda w: ANNOTATION[w.annotation]["filter"][0],
			 Evalue=lambda w: ANNOTATION[w.annotation]["filter"][1],
			 PID=lambda w: ANNOTATION[w.annotation]["filter"][2],
			 subject_pid=lambda w: ANNOTATION[w.annotation]["filter"][3],
			 subject_coverage=lambda w: ANNOTATION[w.annotation]["filter"][4],
			 querry_coverage=lambda w: ANNOTATION[w.annotation]["filter"][5],
	shell :   "{SCRIPTS}/M8_Filtering.py {input} -D {params.annotation} -B {params.Bitscore} -E {params.Evalue} -P {params.PID} -R {params.subject_pid} -C {params.subject_coverage} -Q {params.querry_coverage}  >{output}"


# rule HMM:
# 	input :  "{filename}.faa"
# 	output : "{filename}_pfam.m8"
# 	params : lambda w: ANNOTATION[w.annotation]
# 	log:     "{filename}_diamond.log"
# 	thread:  1000
# 	rule :   "diamond blastp -d {params}  -q {input} -p {thread} -o {output} -f6 qseqid sseqid qstart qend qlen sstart send slen length pident evalue bitscore &>{log}"

